#version 330 core
layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

in vec3 relativePosition[];
in vec3 toLightVector[];
in vec3 toCameraVector[];
in float visibility[];
in float shoreFactor[];

out vec3 normal;
out vec3 toLightVectorG;
out vec3 toCameraVectorG;
out float visibilityG;
out float shoreFactorG;

uniform vec3 lightPosition;

vec3 calcTriangleNormal(){
	vec3 tangent1 = relativePosition[1].xyz - relativePosition[0].xyz;
	vec3 tangent2 = relativePosition[2].xyz - relativePosition[0].xyz;
	vec3 normal = cross(tangent1, tangent2);
	return normalize(normal);
}

void main(void) {
	for(int i=0;i<3;i++){
   		gl_Position = gl_in[i].gl_Position;
   		normal = calcTriangleNormal();
   		
		toLightVectorG = toLightVector[i];
		
		
		toCameraVectorG = toCameraVector[i];
		visibilityG = visibility[i];
		shoreFactorG = shoreFactor[i];
		
   		
   		EmitVertex();
   	}
   	
   	EndPrimitive();
}