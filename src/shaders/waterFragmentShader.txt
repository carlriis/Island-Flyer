#version 330 core
out vec4 out_Color;

in vec3 normal;
in float visibilityG;
in vec3 surfaceNormalG;
in vec3 toLightVectorG;
in vec3 toCameraVectorG;
in float shoreFactorG;

uniform vec3 lightColour;
uniform vec3 attenuation;
uniform vec3 skyColour;

void main() {

	// light things
	float shineDamper = 10;
	float reflectivity = 0.75;	
	
	vec3 unitNormal = normalize(normal);
	vec3 unitVectorToCamera = normalize(toCameraVectorG);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	

		float distance = length(toLightVectorG);
		float attFactor = attenuation.x + (attenuation.y * distance) + (attenuation.z * distance * distance);
		vec3 unitLightVector = normalize(toLightVectorG);
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColour)/attFactor;
		totalSpecular = totalSpecular + (dampedFactor * lightColour * reflectivity)/attFactor;

	// Water colour
	out_Color = vec4(0, 128.0/255.0, 183.0/255.0, 1);
	
	totalDiffuse = max(totalDiffuse, 0.15);
	out_Color = vec4(totalDiffuse, 1.0) * out_Color + vec4(totalSpecular, 1.0);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibilityG);
	out_Color.a = shoreFactorG;
}