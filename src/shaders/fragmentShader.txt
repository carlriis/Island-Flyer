#version 330 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour;
uniform vec3 attenuation;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;
uniform float useFakeLighting;

void main() {

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);

	vec3 totalDiffuse = vec3(0.0);
	

		float distance = length(toLightVector);
		float attFactor = attenuation.x + (attenuation.y * distance) + (attenuation.z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector);
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		
		if (useFakeLighting > 0.5 && unitNormal.y < -0.523) {
			brightness += 0.25;
		}

		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		totalDiffuse = totalDiffuse + (brightness * lightColour)/attFactor;

	
	totalDiffuse = max(totalDiffuse, 0.15);


	
	vec4 textureColour = texture(modelTexture, pass_textureCoords);
	if (textureColour.a < 0.9) {
		discard;
	}
	
	out_Color = vec4(totalDiffuse, 1.0) * textureColour;
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);

}