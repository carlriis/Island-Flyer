#version 430 core

in vec4 colourG;
in vec3 surfaceNormalG;
in vec3 toLightVectorG[4];
in vec3 toCameraVectorG;
in float visibilityG;

out vec4 out_Color;

uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float shineDamper;	
uniform float reflectivity;
uniform vec3 skyColour;

void main() {
	
	// light things
	vec3 unitNormal = normalize(surfaceNormalG);
	vec3 unitVectorToCamera = normalize(toCameraVectorG);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for (int i = 0; i < 4; i++) {
		float distance = length(toLightVectorG[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVectorG[i]);
		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
		totalSpecular = totalSpecular + (dampedFactor * lightColour[i] * reflectivity)/attFactor;
	}
	
	
	totalDiffuse = max(totalDiffuse, 0.15);
	out_Color = vec4(totalDiffuse, 1.0) * colourG + vec4(totalSpecular, 1.0);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibilityG);

}